{
  "name": "electron-typescript-boilerplate",
  "description": "A boilerplate for writing, compiling, building and packaging Electron apps with TypeScript.",
  "version": "0.1.0",
  "keywords": [
    "electron",
    "typescript",
    "boilerplate",
    "template"
  ],
  "os": [
    "darwin",
    "win32"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/idesis-gmbh/SingleInstanceBrowser.git"
  },
  "readme": "README.md",
  "bugs": {
    "url": "https://github.com/idesis-gmbh/SingleInstanceBrowser/issues",
    "email": "produktion@idesis.de"
  },
  "license": "MIT",
  "scripts": {
    "test": "echo script test not specified && exit 1",
    "stop": "echo script stop not specified && exit 1",
    "cmd": "node ./build/run-cmd.js",
    "//##### Clean": "#####",
    "clean:darwinrelease": "node ./build/clean-release.js ./app/package.json darwin ./release/",
    "clean:win32release": "node ./build/clean-release.js ./app/package.json win32 ./release/",
    "preclean": "echo ///// Cleaning...",
    "clean": "shx rm -rf ./build/tmp/js/ ./build/tmp/package.json ./build/tmp/appicon.icns ./build/tmp/appicon.ico ./out/",
    "clean:all": "npm run clean --  ./release/",
    "//##### Compile main": "#####",
    "prec:main:compile": "echo ///// Compiling main...",
    "c:main:compile": "npm run cmd --  tsc -p ./build/tsconfigmain.json",
    "prec:main:pack": "echo ///// Packing compiled main...",
    "c:main:pack": "rollup --silent -i ./build/tmp/js/MainProcess.js -o ./out/bin/MainProcess.js -f cjs",
    "c:main": "npm-run-all -s c:main:compile c:main:pack",
    "//##### Compile renderer": "#####",
    "prec:renderer:compile": "echo ///// Compiling renderer...",
    "c:renderer:compile": "npm run cmd --  tsc -p ./build/tsconfigrenderer.json",
    "prec:renderer:pack": "echo ///// Packing compiled renderer...",
    "c:renderer:pack": "rollup --silent -i ./build/tmp/js/RendererProcess.js -o ./out/bin/RendererProcess.js -f cjs",
    "c:renderer": "npm-run-all -s c:renderer:compile c:renderer:pack",
    "//##### Compile all": "#####",
    "c:all": "npm run cmd --  tsc -p ./build/tsconfigall.json",
    "//##### Compile and pack main and renderer": "#####",
    "precompile": "echo ///// Compiling main and renderer...",
    "compile": "npm-run-all -s c:all c:main:pack c:renderer:pack",
    "//##### Compress main": "#####",
    "prez:main": "echo ///// Compressing main...",
    "z:main": "babili ./out/bin/MainProcess.js -d .",
    "//##### Compress renderer": "#####",
    "prez:renderer": "echo ///// Compressing renderer...",
    "z:renderer": "babili ./out/bin/RendererProcess.js -d .",
    "//##### Compress main and renderer": "#####",
    "precompress": "echo ///// Compressing main and renderer...",
    "compress": "npm-run-all -s z:main z:renderer",
    "//##### TSLint": "#####",
    "prelint": "echo ///// TypeScript linting...",
    "lint": "npm run cmd --  tslint --config ./app/src/tslint.json ./app/src/**/*.ts",
    "//##### Build": "#####",
    "b:prep-dev-nm": "shx mkdir -p ./build/tmp/ && shx cp -rf ./app/package.json ./build/tmp/",
    "b:make-dev-nm": "cd ./build/tmp/ && npm i && npm prune",
    "b:prep-out-nm": "shx mkdir -p ./out/ && shx cp -rf ./app/package.json ./out/",
    "b:make-out-nm": "cd ./out/ && npm i --production",
    "b:strip-out-pj": "node ./build/build-app-package.json.js ./out/package.json",
    "b:app-package.json": "npm-run-all -s b:prep-dev-nm b:make-dev-nm b:prep-out-nm b:make-out-nm b:strip-out-pj",
    "preb:root": "shx mkdir -p ./out/ && node ./build/clean-app-root-files.js ./out/ bin lib node_modules res style package.json",
    "b:root": "shx cp -rf ./app/_root/* ./out/ && shx rm -rf ./out/appicon.png",
    "b:style": "shx mkdir -p ./out/ && shx rm -rf ./out/style/ && npm run cmd --  -f ./app/style/ shx cp -rf ./app/style/ ./out/",
    "b:lib":   "shx mkdir -p ./out/ && shx rm -rf ./out/lib/   && npm run cmd --  -f ./app/lib/   shx cp -rf ./app/lib/   ./out/",
    "b:res":   "shx mkdir -p ./out/ && shx rm -rf ./out/res/   && npm run cmd --  -f ./app/res/   shx cp -rf ./app/res/   ./out/",
    "prebuild": "echo ///// Updating/pruning npm modules, copying app resources...",
    "build": "npm-run-all -p b:app-package.json b:root b:style b:lib b:res ",
    "//##### Watch for changes": "#####",
    "w:app-package.json": "onchange \"./app/package.json\" -v -w --  npm-run-all b:app-package.json",
    "w:root": "onchange ./app/_root/**/* -v -w --  npm run b:root",
    "w:style": "onchange ./app/style/**/* -v -w --  npm run b:style",
    "w:lib": "onchange ./app/lib/**/* -v -w --  npm run b:lib",
    "w:res": "onchange ./app/res/**/* -v -w --  npm run b:res",
    "w:main": "onchange ./app/src/MainProcess.ts ./app/src/main/**/*.ts -v -w --  npm run c:main",
    "w:renderer": "onchange ./app/src/RendererProcess.ts ./app/src/renderer/**/*.ts -v -w --  npm run c:renderer",
    "w:shared": "onchange ./app/src/shared/**/*.ts -v -w --  npm run compile",
    "prewatch": "echo ///// Starting all watchers:",
    "watch": "npm-run-all -p w:app-package.json w:root w:style w:lib w:res w:main w:renderer w:shared",
    "//##### Start packaged app/current build": "#####",
    "s:darwin": "node ./build/run-release.js ./app/package.json darwin",
    "s:win32": "node ./build/run-release.js ./app/package.json win32",
    "prestart": "echo ///// Starting current build...",
    "start": "npm run cmd --  electron ./out/",
    "//##### Make and package darwin": "#####",
    "m:darwin:checkwin32": "node -e \"if (process.platform == 'win32') {console.log('Packaging darwin on win32 creates unusable files, please use \"\"npm run make\"\" only.'); process.exit(1);}\"",
    "m:darwin:icns": "shx mkdir -p ./build/tmp/ && npm run cmd --  -f ./app/_root/appicon.png png2icons ./app/_root/appicon.png ./build/tmp/appicon -icns",
    "m:darwin:pkg": "node ./build/run-electron-packager.js ./app/package.json ./package.json darwin",
    "prem:darwin": "npm run m:darwin:checkwin32 && echo ///// Making darwin release...",
    "m:darwin": "npm-run-all -p clean clean:darwinrelease -s build compile compress m:darwin:icns m:darwin:pkg",
    "//##### Make and package win32": "#####",
    "m:win32:ico": "shx mkdir -p ./build/tmp/ && npm run cmd --  -f ./app/_root/appicon.png png2icons ./app/_root/appicon.png ./build/tmp/appicon -icop",
    "m:win32:pkg": "node ./build/run-electron-packager.js ./app/package.json ./package.json win32",
    "prem:win32": "echo ///// Making win32 release...",
    "m:win32": "npm-run-all -p clean clean:win32release -s build compile compress m:win32:ico m:win32:pkg",
    "//##### Make and package darwin and win32": "#####",
    "premake:all": "npm run m:darwin:checkwin32 && echo ///// Making darwin and win32 releases...",
    "make:all": "npm-run-all -s \"clean --  ./release/\" build -p compile m:darwin:icns m:win32:ico -s compress m:darwin:pkg m:win32:pkg",
    "//##### Make and package current platform": "#####",
    "make": "node -e \"require('child_process').spawnSync((process.platform == 'win32') ? 'npm.cmd' : 'npm', ['run', 'm:' + process.platform], {shell: true, stdio: 'inherit'});\""
  },
  "dependencies": {
    "npm-run-all": "4.0.2",
    "fs-extra": "3.0.1",
    "onchange": "3.2.1",
    "rollup": "0.43.0",
    "babili": "0.1.4",
    "shx": "0.2.2",
    "png2icons": "0.9.1"
  }
}
